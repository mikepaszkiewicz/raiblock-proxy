{
  "_args": [
    [
      {
        "raw": "function-name-support@^0.2.0",
        "scope": null,
        "escapedName": "function-name-support",
        "name": "function-name-support",
        "rawSpec": "^0.2.0",
        "spec": ">=0.2.0 <0.3.0",
        "type": "range"
      },
      "/Users/zoomer/Habitat/nodejs-docs-samples/appengine/hello-world/node_modules/concordance"
    ]
  ],
  "_from": "function-name-support@>=0.2.0 <0.3.0",
  "_id": "function-name-support@0.2.0",
  "_inCache": true,
  "_location": "/function-name-support",
  "_nodeVersion": "7.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/function-name-support-0.2.0.tgz_1495208580941_0.6323473402298987"
  },
  "_npmUser": {
    "name": "novemberborn",
    "email": "mark@novemberborn.net"
  },
  "_npmVersion": "4.6.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "function-name-support@^0.2.0",
    "scope": null,
    "escapedName": "function-name-support",
    "name": "function-name-support",
    "rawSpec": "^0.2.0",
    "spec": ">=0.2.0 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/concordance"
  ],
  "_resolved": "https://registry.npmjs.org/function-name-support/-/function-name-support-0.2.0.tgz",
  "_shasum": "55d3bfaa6eafd505a50f9bc81fdf57564a0bb071",
  "_shrinkwrap": null,
  "_spec": "function-name-support@^0.2.0",
  "_where": "/Users/zoomer/Habitat/nodejs-docs-samples/appengine/hello-world/node_modules/concordance",
  "author": {
    "name": "Mark Wubben",
    "url": "https://novemberborn.net/"
  },
  "bugs": {
    "url": "https://github.com/novemberborn/function-name-inference/issues"
  },
  "dependencies": {},
  "description": "Determine the level of support for function name inference.",
  "devDependencies": {
    "@novemberborn/as-i-preach": "^9.0.0",
    "ava": "^0.19.1",
    "codecov": "^2.2.0",
    "istanbul-lib-instrument": "^1.7.1",
    "nyc": "^10.3.2",
    "proxyquire": "^1.8.0"
  },
  "directories": {},
  "dist": {
    "shasum": "55d3bfaa6eafd505a50f9bc81fdf57564a0bb071",
    "tarball": "https://registry.npmjs.org/function-name-support/-/function-name-support-0.2.0.tgz"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "ca98e7a6db320ecdd8378c812c127047b1d18825",
  "homepage": "https://github.com/novemberborn/function-name-inference#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "novemberborn",
      "email": "mark@novemberborn.net"
    }
  ],
  "name": "function-name-support",
  "nyc": {
    "reporter": [
      "html",
      "lcov",
      "text"
    ]
  },
  "optionalDependencies": {},
  "readme": "# function-name-support\n\nFeature detection for function names. See [*The names of functions in\nES6*](http://2ality.com/2015/09/function-names-es6.html) for background.\nProvides the [same results as\n`node-compat-table`][node-compat-table].\n\n## Installation\n\n```console\n$ npm install --save function-name-support\n```\n\n## Usage\n\n```js\nconst functionNameSupport = require('function-name-support')\n```\n\n### `support`\n\nA frozen object with boolean values. Compare with\n[`node-compat-table`][node-compat-table]:\n\n* *function statements*: `functionStatements`\n* *function expressions*: `functionExpressions`\n* *new Function*: `newFunction`\n* *bound functions*: `boundFunctions`\n* *variables (function)*: `functionVariables`\n* *object methods (function)*: `functionObjectMethods`\n* *accessor properties*: `accessorProperties`\n* *shorthand methods*: `shorthandMethods`\n* *symbol-keyed methods*: `symbolKeyedMethods`\n* *class statements*: `classStatements`\n* *class expressions*: `classExpressions`\n* *variables (class)*: `classVariables`\n* *object methods (class)*: `classObjectMethods`\n* *class prototype methods*: `classPrototypeMethods`\n* *class static methods*: `classStaticMethods`\n\n### `hasFullSupport`\n\nA boolean indicating whether all known function name inferences are supported.\n\n### `bitFlags`\n\nAn integer that stores a serialization of the `support` object. Useful when\nstoring a function name (or lack thereof) for later comparisons along with\ndetails on whether the function name was inferable at all.\n\n### `isSubsetOf(otherFlags): boolean`\n\nHelper method for comparing `bitFlags`. Returns `true` if it is a subset of\n`otherFlags`.\n\n### `isSupersetOf(otherFlags: number): boolean`\n\nHelper method for comparing `bitFlags`. Returns `true` if it is a superset of\n`otherFlags`.\n\n[node-compat-table]: http://node.green/#ES2015-built-in-extensions-function--name--property\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/novemberborn/function-name-inference.git"
  },
  "scripts": {
    "coverage": "nyc npm test",
    "lint": "as-i-preach",
    "posttest": "npm run lint",
    "test": "ava"
  },
  "standard-engine": "@novemberborn/as-i-preach",
  "version": "0.2.0"
}
